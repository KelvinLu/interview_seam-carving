#!/usr/bin/env ruby

require 'chunky_png'

width = nil
y = 0
rows = []

def warn(msg)
  $stderr.puts "\x1B[31;1m#{msg}\x1B[0m"
end

def success(msg)
  $stderr.puts "\x1B[32;1m#{msg}\x1B[0m"
end

def info(msg)
  $stderr.puts "\x1B[1m#{msg}\x1B[0m"
end

begin
  while (row = $stdin.readline.split(',').compact)
    y += 1
    length = row.length

    info "Assuming from input: image width is #{width ||= length} pixels" if width.nil?

    warn "Row #{y} has mismatched number of elements (expected #{width}, got #{length})" unless width == length

    x = 0
    for i in (0..(width - 1))
      x += 1
      v = row[i]

      begin
        raise "value is not a float (is '#{v}')" if (v =~ /^[0-9.]+$/).nil?
        raise "value is less than 0.0 (is #{v})" if v.to_f < 0
        raise "value is greater than 1.0 (is #{v})" if v.to_f > 1
      rescue StandardError => e
        warn "Pixel at (#{y}, #{x}): #{e.message}"
      end
    end

    rows << row.map { |v| v = (v.to_f * 255.0).to_i; ChunkyPNG::Color.rgb(v, v, v) }
  end
rescue EOFError
end

height = rows.length
image = ChunkyPNG::Canvas.new(width, height)

for y in 0..(height - 1)
  image.replace_row!(y, rows[y])
end

image.write($stdout) if ARGV.include? '-o'

success "Formed a #{width}px-by-#{height}px image"
